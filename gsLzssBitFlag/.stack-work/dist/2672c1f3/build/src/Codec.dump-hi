
==================== FINAL INTERFACE ====================
2016-02-07 17:17:50.1102034 UTC

interface gsLzs_6ZlkkGaKkNE5ehSkCZZUx3:Codec 7103
  interface hash: a4dfd3f98c4d8e193d18c2bd617bc598
  ABI hash: 65dac47b64396ddbeeff0d803f550b85
  export-list hash: 6a9251fd2f84b4b90ca7e5bcb0394f34
  orphan hash: 91b62fb33cc80f699d2dabbfe665e511
  flag hash: 6d36984f8d106c94abccf6e328f3836a
  sig of: Nothing
  used TH splices: False
  where
exports:
  Codec.decode
  Codec.encode
module dependencies:
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0
                      base-unicode-symbols-0.2.2.4@baseu_HARyL3klEFABQ7g2MPHMdz
                      bitstream-0.2.0.4@bitst_BQbLuh1SAyZJZAeLVOmcbb
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      stringsearch-0.3.6.6@strin_CAOAc0sCfAC9gi7YClo2KY
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.10.12.3@vecto_Hlsuo0rfZGxDZa3vCL7yzy
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.10.12.3@vecto_Hlsuo0rfZGxDZa3vCL7yzy:Data.Vector.Fusion.Stream
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         vector-0.10.12.3@vecto_Hlsuo0rfZGxDZa3vCL7yzy:Data.Vector.Storable
import  -/  base-4.8.2.0:Data.Bits 87f514c5f0e66e224843da33c04aa38b
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:Data.Word ec8deb535202352cc8b509b14004bcbd
import  -/  base-4.8.2.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.2.0:GHC.Float e532d434ec2447d809887c0fca1d78a5
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:GHC.Word 10dc88543d98000abab9695a1019767d
import  -/  base-4.8.2.0:Numeric 7a5febcdaefe4560a31129dafeb9ee43
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  bitstream-0.2.0.4@bitst_BQbLuh1SAyZJZAeLVOmcbb:Data.Bitstream.Generic 39a6b796feff3070e35ab70db4d7b386
import  -/  bitstream-0.2.0.4@bitst_BQbLuh1SAyZJZAeLVOmcbb:Data.Bitstream.Lazy 40fc5880692d139a37dde6f8a6e58b25
import  -/  bitstream-0.2.0.4@bitst_BQbLuh1SAyZJZAeLVOmcbb:Data.Bitstream.Packet 45e0b91d5eba71b4ab323d748f0ddded
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Lazy 59e7973423198e93620da16e5f7527dd
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Lazy.Internal be8c2313b6f0cc8907d9784ae8e9c59d
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8:Control.Monad.State 3c8114545920fee1e57c3d7a07c2d0d7
import  -/  mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8:Control.Monad.State.Class 521f2360d2f7cec1d4be0e199fde9ee2
import  -/  stringsearch-0.3.6.6@strin_CAOAc0sCfAC9gi7YClo2KY:Data.ByteString.Lazy.Search 8678030782a0c0483ba93d3569fbda1f
import  -/  transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.State.Lazy 442cc9f80155d8aaed5b22580b659d92
80accd2ea3840eff760d060e71d771ee
  $fShowLzEntry :: GHC.Show.Show Codec.LzEntry
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Codec.LzEntry
                  Codec.$fShowLzEntry_$cshowsPrec
                  Codec.$fShowLzEntry_$cshow
                  Codec.$fShowLzEntry_$cshowList -}
80accd2ea3840eff760d060e71d771ee
  $fShowLzEntry1 ::
    Codec.LzEntry -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ x :: Codec.LzEntry s :: GHC.Base.String[OneShot] ->
                 GHC.Base.++ @ GHC.Types.Char (Codec.$fShowLzEntry_$cshow x) s) -}
b914427bcab6c5976f3c01c4d325b087
  $fShowLzEntry2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
3b6f79c062021e78031bf8d4383d5159
  $fShowLzEntry3 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 16) -}
64f0ce59a566ec31c5e67de1027c935a
  $fShowLzEntry4 :: GHC.Word.Word8
  {- HasNoCafRefs, Unfolding: (GHC.Word.W8# __word 16) -}
80accd2ea3840eff760d060e71d771ee
  $fShowLzEntry_$cshow :: Codec.LzEntry -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: Codec.LzEntry ->
                 case ds of wild {
                   Codec.Liter b
                   -> GHC.CString.unpackAppendCString#
                        " Liter 0x"#
                        (Numeric.showIntAtBase
                           @ GHC.Word.Word8
                           GHC.Word.$fIntegralWord8
                           GHC.Word.$fShowWord8
                           Codec.$fShowLzEntry4
                           GHC.Show.intToDigit
                           b
                           (GHC.Types.[] @ GHC.Types.Char))
                   Codec.Refer l d
                   -> GHC.CString.unpackAppendCString#
                        " Refer {len = 0x"#
                        (GHC.Base.++
                           @ GHC.Types.Char
                           (Numeric.showIntAtBase
                              @ GHC.Types.Int
                              GHC.Real.$fIntegralInt
                              GHC.Show.$fShowInt
                              Codec.$fShowLzEntry3
                              GHC.Show.intToDigit
                              l
                              (GHC.Types.[] @ GHC.Types.Char))
                           (GHC.CString.unpackAppendCString#
                              " dist = 0x"#
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 (Numeric.showIntAtBase
                                    @ GHC.Types.Int
                                    GHC.Real.$fIntegralInt
                                    GHC.Show.$fShowInt
                                    Codec.$fShowLzEntry3
                                    GHC.Show.intToDigit
                                    d
                                    (GHC.Types.[] @ GHC.Types.Char))
                                 Codec.$fShowLzEntry2))) }) -}
80accd2ea3840eff760d060e71d771ee
  $fShowLzEntry_$cshowList :: [Codec.LzEntry] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [Codec.LzEntry] s :: GHC.Base.String ->
                 GHC.Show.showList__ @ Codec.LzEntry Codec.$fShowLzEntry1 ls s) -}
80accd2ea3840eff760d060e71d771ee
  $fShowLzEntry_$cshowsPrec ::
    GHC.Types.Int -> Codec.LzEntry -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int x :: Codec.LzEntry s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Codec.$fShowLzEntry_$cshow x))
                   s) -}
e13fdf5bb080e1fd9fe8ad4f9be59eda
  $stoByteString ::
    Data.Bitstream.Bitstream Data.Bitstream.Packet.Left
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <L,U> -}
19a716b39c5269438dec4ad2e61b3b47
  $wa ::
    [GHC.Types.Bool]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> (# [Codec.LzEntry], Codec.BiCount GHC.Types.Bool #)
  {- Arity: 3, Strictness: <S,1*U><L,1*U(U)><L,U(U)>, Inline: [0] -}
9112f96871c93903b0a61c9e60cfd56a
  $wdecode ::
    Data.ByteString.Lazy.Internal.ByteString
    -> (# Data.ByteString.Lazy.Internal.ByteString,
          GHC.Types.Int,
          GHC.Types.Int #)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ w :: Data.ByteString.Lazy.Internal.ByteString ->
                 let {
                   inputBits :: [GHC.Types.Bool]
                   = case Codec.decode_g
                            (Data.Bitstream.Lazy.$fBitstreamBitstream0_$sfromChunks
                               (GHC.Base.map
                                  @ Data.ByteString.Internal.ByteString
                                  @ (Data.Bitstream.Bitstream Data.Bitstream.Packet.Left)
                                  (Data.Bitstream.fromByteString @ Data.Bitstream.Packet.Left)
                                  (Data.ByteString.Lazy.toChunks_go1
                                     w))) of wild { Data.Vector.Fusion.Stream.Monadic.Stream s00 step s1 ds1 ->
                     letrec {
                       go2 :: s00 -> [GHC.Types.Bool] {- Arity: 1, Strictness: <L,U> -}
                       = \ s2 :: s00 ->
                         case (step s2)
                                `cast`
                              (Data.Vector.Fusion.Util.NTCo:Id[0]
                                   <Data.Vector.Fusion.Stream.Monadic.Step
                                      s00 GHC.Types.Bool>_R) of wild1 {
                           Data.Vector.Fusion.Stream.Monadic.Yield x1 s'
                           -> GHC.Types.: @ GHC.Types.Bool x1 (go2 s')
                           Data.Vector.Fusion.Stream.Monadic.Skip s' -> go2 s'
                           Data.Vector.Fusion.Stream.Monadic.Done
                           -> GHC.Types.[] @ GHC.Types.Bool }
                     } in
                     go2 s1 }
                 } in
                 let {
                   finalState :: Codec.BiCount GHC.Types.Bool
                   = case Codec.$wa
                            inputBits
                            Codec.decode1
                            Codec.decode1 of ww { (#,#) ww1 ww2 ->
                     ww2 }
                 } in
                 (# Data.ByteString.Lazy.Internal.packBytes_$spackChunks
                      32
                      (case Codec.$wa
                              inputBits
                              Codec.decode1
                              Codec.decode1 of ww { (#,#) ww1 ww2 ->
                       Codec.decode_go ww1 (GHC.Types.[] @ GHC.Word.Word8) }),
                    case finalState of wild { Codec.BiCount ds ds1 ds2 ->
                    case ds1 of ww { GHC.Types.I# ww1 ->
                    case GHC.Classes.divInt# ww1 8 of ww4 { DEFAULT ->
                    GHC.Types.I# (GHC.Prim.+# ww4 1) } } },
                    case finalState of wild { Codec.BiCount ds ds1 ds2 -> ds2 } #)) -}
01184db6076bfd358744a0f8771edc13
  data BiCount a
    = BiCount {str :: [a],
               inCount :: GHC.Types.Int,
               outCount :: GHC.Types.Int}
80accd2ea3840eff760d060e71d771ee
  data LzEntry
    = Liter GHC.Word.Word8
    | Refer {len :: GHC.Types.Int, dist :: GHC.Types.Int}
f94b6aea8cc828c1df538cc6608c4268
  decode ::
    Data.ByteString.Lazy.Internal.ByteString
    -> (Data.ByteString.Lazy.Internal.ByteString,
        GHC.Types.Int,
        GHC.Types.Int)
  {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Data.ByteString.Lazy.Internal.ByteString ->
                 case Codec.$wdecode w of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
3d6f674079f72028bcc9f724eac77002
  decode1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
da922edb4288038ce3528d378cb2dc15
  decode_g ::
    Data.Bitstream.Lazy.Bitstream Data.Bitstream.Packet.Left
    -> Data.Vector.Fusion.Stream.Stream GHC.Types.Bool
  {- Unfolding: (Data.Bitstream.Generic.stream
                   @ (Data.Bitstream.Lazy.Bitstream Data.Bitstream.Packet.Left)
                   Data.Bitstream.Lazy.$fBitstreamBitstream0) -}
477ef44b886fdf2e0b65e3d93cd627ca
  decode_go ::
    [Codec.LzEntry] -> [GHC.Word.Word8] -> [GHC.Word.Word8]
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
eb1f88f7c36e2f547af03f8562acd10e
  dist :: Codec.LzEntry -> GHC.Types.Int
  RecSel Codec.LzEntry
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Codec.LzEntry ->
                 case ds of wild {
                   Codec.Liter ipv -> Codec.dist1 Codec.Refer ds1 ds2 -> ds2 }) -}
acbcf878ac34929a288b9e80194b3dfb
  dist1 :: GHC.Types.Int
  {- Strictness: b -}
f22af27ec0661bfc2bd7dca11d796413
  encode ::
    Data.ByteString.Lazy.Internal.ByteString
    -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ x :: Data.ByteString.Lazy.Internal.ByteString ->
                 Data.ByteString.Lazy.fromChunks_go
                   (GHC.Base.map
                      @ (Data.Bitstream.Bitstream Data.Bitstream.Packet.Left)
                      @ Data.ByteString.Internal.ByteString
                      Codec.$stoByteString
                      (Data.Bitstream.Lazy.toChunks
                         @ Data.Bitstream.Packet.Left
                         (Codec.encode_f
                            (Data.Vector.Fusion.Stream.Monadic.Stream
                               @ Data.Vector.Fusion.Util.Id
                               @ GHC.Types.Bool
                               @ [GHC.Types.Bool]
                               Codec.encode16
                               (GHC.Base.++
                                  @ GHC.Types.Bool
                                  (Codec.encode_go
                                     (Codec.encode_encodeLz'
                                        (Data.ByteString.Lazy.Internal.unpackBytes x)
                                        (GHC.Types.[] @ GHC.Word.Word8))
                                     Codec.decode1)
                                  Codec.encode1)
                               Data.Vector.Fusion.Stream.Size.Unknown))))) -}
0ca34227ed121ae204b6004b10a823d6
  encode1 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.False
                   Codec.encode2) -}
3ecc0a9065c8ae6506723d83ae194831
  encode10 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.False
                   Codec.encode11) -}
57a59e7dfd293d88b9a4a11ad5ffd0cf
  encode11 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.False
                   Codec.encode12) -}
36ae165bf18813b57d600ee489305a43
  encode12 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.False
                   Codec.encode13) -}
ef0f9ce26aba14d8b3ac54825c9350e8
  encode13 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.False
                   Codec.encode14) -}
16f7eae14fad14bd608ede561918b814
  encode14 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.False
                   Codec.encode15) -}
9b4a01c53a828607ae84d5f8c9e5c9a0
  encode15 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.False
                   (GHC.Types.[] @ GHC.Types.Bool)) -}
75a8d006cf5399429c5e752176f2639b
  encode16 ::
    [GHC.Types.Bool]
    -> Data.Vector.Fusion.Util.Id
         (Data.Vector.Fusion.Stream.Monadic.Step
            [GHC.Types.Bool] GHC.Types.Bool)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ ds :: [GHC.Types.Bool] ->
                 case ds of wild {
                   []
                   -> (Data.Vector.Fusion.Stream.Monadic.Done
                         @ [GHC.Types.Bool]
                         @ GHC.Types.Bool)
                        `cast`
                      (Sym (Data.Vector.Fusion.Util.NTCo:Id[0]
                                <Data.Vector.Fusion.Stream.Monadic.Step
                                   [GHC.Types.Bool] GHC.Types.Bool>_R))
                   : x xs1
                   -> (Data.Vector.Fusion.Stream.Monadic.Yield
                         @ [GHC.Types.Bool]
                         @ GHC.Types.Bool
                         x
                         xs1)
                        `cast`
                      (Sym (Data.Vector.Fusion.Util.NTCo:Id[0]
                                <Data.Vector.Fusion.Stream.Monadic.Step
                                   [GHC.Types.Bool] GHC.Types.Bool>_R)) }) -}
53b130af01d1d1ff5232d171b34c7c24
  encode2 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.True
                   Codec.encode3) -}
db5a56d4752aa62434c1ca74a5a57248
  encode3 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.True
                   Codec.encode4) -}
939ef679b69b34fab4671c15d9e34ba9
  encode4 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.True
                   Codec.encode5) -}
1b913cf5dcfb1c19c7c3d5ec871e4e77
  encode5 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.True
                   Codec.encode6) -}
f272addcdf542b21a1032091c9cb6cb8
  encode6 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.True
                   Codec.encode7) -}
0588e0114c111ef5b3135a48e4de5bd3
  encode7 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.False
                   Codec.encode8) -}
f442f9e92b930902b4039a8bc8acb46f
  encode8 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.False
                   Codec.encode9) -}
4ce5d18bd80a4fae22b567afca9caa71
  encode9 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.False
                   Codec.encode10) -}
83cf3153a9319cfd285c533ee6745b40
  encode_encodeLz' ::
    [GHC.Word.Word8] -> [GHC.Word.Word8] -> [Codec.LzEntry]
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
7cd7182aa543ba9843521a3ef50fb671
  encode_f ::
    Data.Vector.Fusion.Stream.Stream GHC.Types.Bool
    -> Data.Bitstream.Lazy.Bitstream Data.Bitstream.Packet.Left
  {- Unfolding: (Data.Bitstream.Generic.unstream
                   @ (Data.Bitstream.Lazy.Bitstream Data.Bitstream.Packet.Left)
                   Data.Bitstream.Lazy.$fBitstreamBitstream0) -}
e3fbeed3eb960c07bb8151b8a1245fa8
  encode_go :: [Codec.LzEntry] -> GHC.Types.Int -> [GHC.Types.Bool]
  {- Arity: 2, Strictness: <S,1*U><L,U(U)> -}
eab578bc13e69de13b1f84299cfd17f1
  inCount :: Codec.BiCount a -> GHC.Types.Int
  RecSel Codec.BiCount
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a9 ds :: Codec.BiCount a9 ->
                 case ds of wild { Codec.BiCount ds1 ds2 ds3 -> ds2 }) -}
e67160310d5685a2183e24b701f47988
  len :: Codec.LzEntry -> GHC.Types.Int
  RecSel Codec.LzEntry
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Codec.LzEntry ->
                 case ds of wild {
                   Codec.Liter ipv -> Codec.len1 Codec.Refer ds1 ds2 -> ds1 }) -}
2da108239ff5ace3af08366780afe5e8
  len1 :: GHC.Types.Int
  {- Strictness: b -}
9dbda9700a81e67cb393b529051fab20
  outCount :: Codec.BiCount a -> GHC.Types.Int
  RecSel Codec.BiCount
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a9 ds :: Codec.BiCount a9 ->
                 case ds of wild { Codec.BiCount ds1 ds2 ds3 -> ds3 }) -}
186c8e6f01c99043b24195eff4732437
  str :: Codec.BiCount a -> [a]
  RecSel Codec.BiCount
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a9 ds :: Codec.BiCount a9 ->
                 case ds of wild { Codec.BiCount ds1 ds2 ds3 -> ds1 }) -}
instance GHC.Show.Show [Codec.LzEntry] = Codec.$fShowLzEntry
"SPEC/Codec toByteString @ Left" [ALWAYS] forall $dBitstream :: Data.Bitstream.Generic.Bitstream
                                                                  (Data.Bitstream.Bitstream
                                                                     Data.Bitstream.Packet.Left)
                                                 $dBitstream1 :: Data.Bitstream.Generic.Bitstream
                                                                   (Data.Bitstream.Packet.Packet
                                                                      Data.Bitstream.Packet.Left)
  Data.Bitstream.toByteString @ Data.Bitstream.Packet.Left
                              $dBitstream
                              $dBitstream1
  = Codec.$stoByteString
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

