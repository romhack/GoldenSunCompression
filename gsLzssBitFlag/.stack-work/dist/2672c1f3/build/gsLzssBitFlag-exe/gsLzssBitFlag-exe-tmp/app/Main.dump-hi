
==================== FINAL INTERFACE ====================
2016-02-07 17:28:49.3219082 UTC

interface main@main:Main 7103
  interface hash: a9e1bcceaa75433cab6e59fadf423942
  ABI hash: 234fa1bfa9931ae35dd22e96756ea1e8
  export-list hash: b22281af848dc7fab606c4c67eae61ff
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 51d10fc7698eda7c0ceac0e47aa14336
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.defaultOptions
  Main.deforOpts
  Main.main
  Main.options
  Main.usage
  Main.Action{Main.Batch Main.Decode Main.Encode Main.NoAction}
  Main.Options{Main.Options Main.optAction Main.optHelp Main.optVersion}
module dependencies: Paths_gsLzssBitFlag
package dependencies: Win32-2.3.1.0@Win32_ELFLzTRksT8Dql3wobiWvb
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      base-unicode-symbols-0.2.2.4@baseu_HARyL3klEFABQ7g2MPHMdz
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bitstream-0.2.0.4@bitst_BQbLuh1SAyZJZAeLVOmcbb
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      directory-1.2.2.0@direc_5xLaLBWdxVZAOIxWfpUWaS
                      filepath-1.4.0.0@filep_Ey7a1in9roBAE8bUFJ5R9m ghc-prim-0.4.0.0
                      gsLzssBitFlag-0.2.0.0@gsLzs_6ZlkkGaKkNE5ehSkCZZUx3
                      integer-gmp-1.0.0.0 mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      stringsearch-0.3.6.6@strin_CAOAc0sCfAC9gi7YClo2KY
                      time-1.5.0.1@time_IYbjC7tGONY15oDy1fGJKz
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.10.12.3@vecto_Hlsuo0rfZGxDZa3vCL7yzy
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         time-1.5.0.1@time_IYbjC7tGONY15oDy1fGJKz:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_IYbjC7tGONY15oDy1fGJKz:Data.Time.Format.Parse
         time-1.5.0.1@time_IYbjC7tGONY15oDy1fGJKz:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.10.12.3@vecto_Hlsuo0rfZGxDZa3vCL7yzy:Data.Vector.Fusion.Stream
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         vector-0.10.12.3@vecto_Hlsuo0rfZGxDZa3vCL7yzy:Data.Vector.Storable
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Version e9980a0c41deaf91381b9a197cb9f282
import  -/  base-4.8.2.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.2.0:GHC.IO.Exception e38c1261b70caecb7af416b94c82c925
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.Console.GetOpt daf81574dc3d91348ad27e777014814d
import  -/  base-4.8.2.0:System.Environment c73e1b71c29d9e28d4cdf8209f2f1559
import  -/  base-4.8.2.0:System.Exit f5581af4ad998e898da01fdc74c2769b
import  -/  base-4.8.2.0:System.IO 638c10c4fd4901a0aca5b77c9f14123d
import  -/  base-4.8.2.0:Text.Printf 0276d4e7547f991f04a90f6b1e7f1f46
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Get f87c878c97e7480a92e049b12d3a9019
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Lazy 59e7973423198e93620da16e5f7527dd
import  -/  directory-1.2.2.0@direc_5xLaLBWdxVZAOIxWfpUWaS:System.Directory 535beb9eb2126c9d10312edd5f31c58e
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  gsLzssBitFlag-0.2.0.0@gsLzs_6ZlkkGaKkNE5ehSkCZZUx3:Codec 65dac47b64396ddbeeff0d803f550b85
import  -/  Paths_gsLzssBitFlag 8a270b2f1fd24412f595810106318069
  exports: 78d2c106000cc3e5a0e1d5738bd4552e
  version ba50b04758fc8c3533e69958720659b0
import  -/  mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8:Control.Monad.Except a48c40e49a1635a6f6c139e86212e5c9
225280025e950ccb55a482796f33a051
  $fEqAction :: GHC.Classes.Eq Main.Action
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Action Main.$fEqAction_$c== Main.$fEqAction_$c/= -}
225280025e950ccb55a482796f33a051
  $fEqAction_$c/= :: Main.Action -> Main.Action -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a :: Main.Action b :: Main.Action ->
                 case a of wild {
                   Main.Decode
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Main.Decode -> GHC.Types.False }
                   Main.Batch
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Main.Batch -> GHC.Types.False }
                   Main.Encode
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Main.Encode -> GHC.Types.False }
                   Main.NoAction
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Main.NoAction -> GHC.Types.False } }) -}
225280025e950ccb55a482796f33a051
  $fEqAction_$c== :: Main.Action -> Main.Action -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: Main.Action ds1 :: Main.Action ->
                 case ds of wild {
                   Main.Decode
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Decode -> GHC.Types.True }
                   Main.Batch
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Batch -> GHC.Types.True }
                   Main.Encode
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Encode -> GHC.Types.True }
                   Main.NoAction
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.NoAction -> GHC.Types.True } }) -}
225280025e950ccb55a482796f33a051
  $fShowAction :: GHC.Show.Show Main.Action
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Action
                  Main.$fShowAction_$cshowsPrec
                  Main.$fShowAction_$cshow
                  Main.$fShowAction_$cshowList -}
778540a422105419639ba26e97b77126
  $fShowAction1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoAction"#) -}
4de3aa75ad9652650f3aaeb1900cc74b
  $fShowAction2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Encode"#) -}
77598d16d97ab06acf7b579fb8672df4
  $fShowAction3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Batch"#) -}
c9415f46b415c432c9d61701319a6fd8
  $fShowAction4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Decode"#) -}
225280025e950ccb55a482796f33a051
  $fShowAction_$cshow :: Main.Action -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Main.Action ->
                 Main.$fShowAction_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
225280025e950ccb55a482796f33a051
  $fShowAction_$cshowList :: [Main.Action] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Action
                   Main.$w$cshowsPrec) -}
225280025e950ccb55a482796f33a051
  $fShowAction_$cshowsPrec ::
    GHC.Types.Int -> Main.Action -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int w1 :: Main.Action w2 :: GHC.Base.String ->
                 Main.$w$cshowsPrec w1 w2) -}
9a20328337833a30c1505c465e680e4c
  $fShowOptions :: GHC.Show.Show Main.Options
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Options
                  Main.$fShowOptions_$cshowsPrec
                  Main.$fShowOptions_$cshow
                  Main.$fShowOptions_$cshowList -}
9a20328337833a30c1505c465e680e4c
  $fShowOptions1 :: Main.Options -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Main.Options w1 :: GHC.Base.String ->
                 case w of ww { Main.Options ww1 ww2 ww3 ->
                 Main.$w$cshowsPrec1 0 ww1 ww2 ww3 w1 }) -}
57f9da57fc68d5a8f64457041879a58b
  $fShowOptions2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
221c44f253658350b79b56affeb4127a
  $fShowOptions3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "optAction = "#) -}
638e380ef46ce0bee3027eaed641f0b0
  $fShowOptions4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "optVersion = "#) -}
465bcedc61dd22edf43d2bca0766e9ff
  $fShowOptions5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
52016ec33cdab5af82b88e423ebe1d43
  $fShowOptions6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "optHelp = "#) -}
ea41658ecc0aeeda890616ef92e5fa7f
  $fShowOptions7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Options {"#) -}
9a20328337833a30c1505c465e680e4c
  $fShowOptions_$cshow :: Main.Options -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Main.Options ->
                 Main.$fShowOptions_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9a20328337833a30c1505c465e680e4c
  $fShowOptions_$cshowList :: [Main.Options] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Options
                   Main.$fShowOptions1) -}
9a20328337833a30c1505c465e680e4c
  $fShowOptions_$cshowsPrec ::
    GHC.Types.Int -> Main.Options -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Main.Options w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Options ww3 ww4 ww5 ->
                 Main.$w$cshowsPrec1 ww1 ww3 ww4 ww5 w2 } }) -}
d4a5a73e2926d14e54a1b60c03079d02
  $sprintf2 ::
    GHC.Base.String
    -> [Text.Printf.UPrintf]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> [GHC.Types.Char]
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U(U)><L,U(U)>,
     Unfolding: (\ fmts :: GHC.Base.String
                   args :: [Text.Printf.UPrintf]
                   a1 :: GHC.Types.Int
                   eta :: GHC.Types.Int ->
                 GHC.Base.map
                   @ GHC.Types.Char
                   @ GHC.Types.Char
                   Text.Printf.$fIsCharChar_$cfromChar
                   (Text.Printf.uprintfs
                      fmts
                      (GHC.List.reverse1
                         @ Text.Printf.UPrintf
                         (GHC.Types.:
                            @ Text.Printf.UPrintf
                            (Text.Printf.$w$sparseIntFormat,
                             Text.Printf.$fPrintfArgInt_$sformatInt eta)
                            (GHC.Types.:
                               @ Text.Printf.UPrintf
                               (Text.Printf.$w$sparseIntFormat,
                                Text.Printf.$fPrintfArgInt_$sformatInt a1)
                               args))
                         (GHC.Types.[] @ Text.Printf.UPrintf))
                      (GHC.Types.[] @ GHC.Types.Char))) -}
225280025e950ccb55a482796f33a051
  $w$cshowsPrec :: Main.Action -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Main.Action w1 :: GHC.Base.String ->
                 case w of wild {
                   Main.Decode -> GHC.Base.++ @ GHC.Types.Char Main.$fShowAction4 w1
                   Main.Batch -> GHC.Base.++ @ GHC.Types.Char Main.$fShowAction3 w1
                   Main.Encode -> GHC.Base.++ @ GHC.Types.Char Main.$fShowAction2 w1
                   Main.NoAction
                   -> GHC.Base.++ @ GHC.Types.Char Main.$fShowAction1 w1 }) -}
8af2cb7d5c74daa27737b934953c5bbd
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> Main.Action
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Types.Bool
                   ww2 :: GHC.Types.Bool
                   ww3 :: Main.Action
                   w :: GHC.Base.String ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowOptions7
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowOptions6
                          (let {
                             eta :: GHC.Base.String
                             = GHC.Base.++
                                 @ GHC.Types.Char
                                 Main.$fShowOptions5
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    Main.$fShowOptions4
                                    (let {
                                       eta1 :: GHC.Base.String
                                       = GHC.Base.++
                                           @ GHC.Types.Char
                                           Main.$fShowOptions5
                                           (GHC.Base.++
                                              @ GHC.Types.Char
                                              Main.$fShowOptions3
                                              (Main.$w$cshowsPrec
                                                 ww3
                                                 (GHC.Base.++
                                                    @ GHC.Types.Char
                                                    Main.$fShowOptions2
                                                    x)))
                                     } in
                                     case ww2 of wild {
                                       GHC.Types.False
                                       -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows17 eta1
                                       GHC.Types.True
                                       -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows16 eta1 }))
                           } in
                           case ww1 of wild {
                             GHC.Types.False
                             -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows17 eta
                             GHC.Types.True
                             -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows16 eta }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w)) }) -}
225280025e950ccb55a482796f33a051
  data Action = Decode | Batch | Encode | NoAction
    Promotable
9a20328337833a30c1505c465e680e4c
  data Options
    = Options {optHelp :: GHC.Types.Bool,
               optVersion :: GHC.Types.Bool,
               optAction :: Main.Action}
    Promotable
6c7fa4c48343482046ce71db370f86a5
  defaultOptions :: Main.Options
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Options
                   GHC.Types.False
                   GHC.Types.False
                   Main.NoAction) -}
6709268733389f562684cab048442b73
  deforOpts ::
    [GHC.Base.String] -> GHC.Types.IO (Main.Options, [GHC.Base.String])
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.deforOpts1
                  `cast`
                (<[GHC.Base.String]>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <(Main.Options, [GHC.Base.String])>_R)) -}
cea18532ab38e27ad6eeb13266cf4626
  deforOpts1 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Main.Options, [GHC.Base.String]) #)
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ argv :: [GHC.Base.String]
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case System.Console.GetOpt.$wgetOpt'
                        @ (Main.Options -> Main.Options)
                        (System.Console.GetOpt.Permute @ (Main.Options -> Main.Options))
                        Main.options
                        argv of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 case GHC.Base.++
                        @ [GHC.Types.Char]
                        ww4
                        (GHC.Base.map
                           @ [GHC.Types.Char]
                           @ [GHC.Types.Char]
                           System.Console.GetOpt.errUnrec
                           ww3) of wild {
                   [] -> (# eta, (Main.deforOpts_go1 ww1 Main.defaultOptions, ww2) #)
                   : ipv ipv1
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ (Main.Options, [GHC.Base.String])
                        (GHC.IO.Exception.$fExceptionIOException_$ctoException
                           (GHC.IO.Exception.IOError
                              (GHC.Base.Nothing @ GHC.IO.Handle.Types.Handle)
                              GHC.IO.Exception.UserError
                              (GHC.Types.[] @ GHC.Types.Char)
                              (Main.deforOpts_go wild)
                              (GHC.Base.Nothing @ Foreign.C.Types.CInt)
                              (GHC.Base.Nothing @ GHC.IO.FilePath)))
                        eta } }) -}
2405f40707dabbac73fbf0a6e61eff78
  deforOpts_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
5043bc4ec64e4dec05b284a3931669bf
  deforOpts_go1 ::
    [Main.Options -> Main.Options] -> Main.Options -> Main.Options
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U,U,U)> -}
5486f54b76a47a22eea0a68c618aff8c
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
db65d8134659b45903bc9b881a1e2e05
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case System.Environment.getArgs2 s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Base.Nothing
                   -> case GHC.Environment.getFullArgs1
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case System.Environment.dropRTSArgs ipv3 of wild1 {
                        []
                        -> case GHC.List.scanl2
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {}
                        : ds3 xs -> Main.main2 xs ipv2 } }
                   GHC.Base.Just argv
                   -> Main.main2 (GHC.List.tail @ GHC.Base.String argv) ipv } }) -}
f6a9d36c2752d32c9f6e86aa0485df36
  main2 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
347fa811f3d85ce6ab4d8c50d1fd8c0b
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
bf45d77d6251bf9211a4c66a1f53b9c3
  optAction :: Main.Options -> Main.Action
  RecSel Main.Options
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Options ->
                 case ds of wild { Main.Options ds1 ds2 ds3 -> ds3 }) -}
ab92623109f81ec698ef194a0e0355d3
  optHelp :: Main.Options -> GHC.Types.Bool
  RecSel Main.Options
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Options ->
                 case ds of wild { Main.Options ds1 ds2 ds3 -> ds1 }) -}
8059057bf5ed9e24522bface96bf1cab
  optVersion :: Main.Options -> GHC.Types.Bool
  RecSel Main.Options
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Options ->
                 case ds of wild { Main.Options ds1 ds2 ds3 -> ds2 }) -}
8fb57a001046ab587a64b3463879be32
  options ::
    [System.Console.GetOpt.OptDescr (Main.Options -> Main.Options)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (System.Console.GetOpt.OptDescr (Main.Options -> Main.Options))
                   Main.options33
                   Main.options1) -}
fbb769fc3317cc4113b3006df57193d3
  options1 ::
    [System.Console.GetOpt.OptDescr (Main.Options -> Main.Options)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (System.Console.GetOpt.OptDescr (Main.Options -> Main.Options))
                   Main.options26
                   Main.options2) -}
580d9cfca19b9c967949a64ca5f88817
  options10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "version"#) -}
68c29f380ad620dc342db5ff0110a8d7
  options11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "v"#) -}
14da979f114b74845b05b57f7b803ddb
  options12 ::
    System.Console.GetOpt.OptDescr (Main.Options -> Main.Options)
  {- Strictness: m,
     Unfolding: (System.Console.GetOpt.Option
                   @ (Main.Options -> Main.Options)
                   Main.options18
                   Main.options16
                   Main.options14
                   Main.options13) -}
c5a5b83d6a50aa4279df508ce6e6c169
  options13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "show help."#) -}
cf3f8101d69f2768d46f75b3975cec6e
  options14 ::
    System.Console.GetOpt.ArgDescr (Main.Options -> Main.Options)
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (System.Console.GetOpt.NoArg
                   @ (Main.Options -> Main.Options)
                   Main.options15) -}
e078dbca134eb212ba72b34ba1b825ad
  options15 :: Main.Options -> Main.Options
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(A,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ opts :: Main.Options ->
                 case opts of wild { Main.Options ds ds1 ds2 ->
                 Main.Options GHC.Types.True ds1 ds2 }) -}
012a5bb400a9d0e5c8cd85a8d847cb6d
  options16 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.options17
                   (GHC.Types.[] @ GHC.Base.String)) -}
dd68c3f33040713146aee04675854750
  options17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "help"#) -}
6af908da570da3e043eb951d41b0dff9
  options18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "h?"#) -}
0f1748a0143e60b96f9401ae8730682e
  options19 ::
    System.Console.GetOpt.OptDescr (Main.Options -> Main.Options)
  {- Strictness: m,
     Unfolding: (System.Console.GetOpt.Option
                   @ (Main.Options -> Main.Options)
                   Main.options25
                   Main.options23
                   Main.options21
                   Main.options20) -}
474608c8251d223ce17148440dbfc8fc
  options2 ::
    [System.Console.GetOpt.OptDescr (Main.Options -> Main.Options)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (System.Console.GetOpt.OptDescr (Main.Options -> Main.Options))
                   Main.options19
                   Main.options3) -}
a7583d4a858161d5153261e96b50bda1
  options20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "encode from raw binary. -e <file_name>"#) -}
291d9ce57c6b19733e1710be004f3448
  options21 ::
    System.Console.GetOpt.ArgDescr (Main.Options -> Main.Options)
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (System.Console.GetOpt.NoArg
                   @ (Main.Options -> Main.Options)
                   Main.options22) -}
0a723106317f3925d536cb67d39ca852
  options22 :: Main.Options -> Main.Options
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ opts :: Main.Options ->
                 case opts of wild { Main.Options ds ds1 ds2 ->
                 Main.Options ds ds1 Main.Encode }) -}
86af70f3f5e971ae1a07c46950d67da6
  options23 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.options24
                   (GHC.Types.[] @ GHC.Base.String)) -}
db80a897448e813306236c40e1764b5c
  options24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "encode"#) -}
e3229a4c12e634d710d34c16ea06cefe
  options25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "e"#) -}
5c123de0e35e1ea65a2206077dd2884a
  options26 ::
    System.Console.GetOpt.OptDescr (Main.Options -> Main.Options)
  {- Strictness: m,
     Unfolding: (System.Console.GetOpt.Option
                   @ (Main.Options -> Main.Options)
                   Main.options32
                   Main.options30
                   Main.options28
                   Main.options27) -}
bec720012e1454865fb2548d9f5890d7
  options27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "batch decode from ROM. -b <file_name table_start_offset entries_count output_folder>"#) -}
207d664065bb279512698b00e8de6a03
  options28 ::
    System.Console.GetOpt.ArgDescr (Main.Options -> Main.Options)
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (System.Console.GetOpt.NoArg
                   @ (Main.Options -> Main.Options)
                   Main.options29) -}
172f0bd016e00a04f5e24cb535e0a9cc
  options29 :: Main.Options -> Main.Options
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ opts :: Main.Options ->
                 case opts of wild { Main.Options ds ds1 ds2 ->
                 Main.Options ds ds1 Main.Batch }) -}
3bc91184f858dd0a1c1719b42cc9079e
  options3 ::
    [System.Console.GetOpt.OptDescr (Main.Options -> Main.Options)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (System.Console.GetOpt.OptDescr (Main.Options -> Main.Options))
                   Main.options12
                   Main.options4) -}
b409760e12a5e69ed0820594772fba0a
  options30 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.options31
                   (GHC.Types.[] @ GHC.Base.String)) -}
54f97c9f4c74b0ccc04c943bab094363
  options31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "batch"#) -}
969f8426a4da75819fd2d63fdac89c8d
  options32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "b"#) -}
e4f606bec4ac5e2fd91a42dd5b0bb935
  options33 ::
    System.Console.GetOpt.OptDescr (Main.Options -> Main.Options)
  {- Strictness: m,
     Unfolding: (System.Console.GetOpt.Option
                   @ (Main.Options -> Main.Options)
                   Main.options39
                   Main.options37
                   Main.options35
                   Main.options34) -}
94cd16dbf3d052d786b3cb525dd248f3
  options34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "decode from ROM. -d <file_name offset>"#) -}
008049f376dd240229d21e920046f6f3
  options35 ::
    System.Console.GetOpt.ArgDescr (Main.Options -> Main.Options)
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (System.Console.GetOpt.NoArg
                   @ (Main.Options -> Main.Options)
                   Main.options36) -}
eb4c11bbaa849010a819f12c062d3d08
  options36 :: Main.Options -> Main.Options
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ opts :: Main.Options ->
                 case opts of wild { Main.Options ds ds1 ds2 ->
                 Main.Options ds ds1 Main.Decode }) -}
bff500b96f4659ccd29fffdbb794bca6
  options37 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.options38
                   (GHC.Types.[] @ GHC.Base.String)) -}
b3aab93eb0d0bbb6fc3f76a8a0ac57b2
  options38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "decode"#) -}
6155db7b11958f58de2b28819d1dc219
  options39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "d"#) -}
771d2ba67d5b153be6bb0063f4686c24
  options4 ::
    [System.Console.GetOpt.OptDescr (Main.Options -> Main.Options)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (System.Console.GetOpt.OptDescr (Main.Options -> Main.Options))
                   Main.options5
                   (GHC.Types.[]
                      @ (System.Console.GetOpt.OptDescr
                           (Main.Options -> Main.Options)))) -}
122e164e5195013ef6873ed0dd28c457
  options5 ::
    System.Console.GetOpt.OptDescr (Main.Options -> Main.Options)
  {- Strictness: m,
     Unfolding: (System.Console.GetOpt.Option
                   @ (Main.Options -> Main.Options)
                   Main.options11
                   Main.options9
                   Main.options7
                   Main.options6) -}
4d2d2274e520c554a9a0087176e96d7c
  options6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "show version number."#) -}
e3f2f14f5b1008c25953807f9b5b33bf
  options7 ::
    System.Console.GetOpt.ArgDescr (Main.Options -> Main.Options)
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (System.Console.GetOpt.NoArg
                   @ (Main.Options -> Main.Options)
                   Main.options8) -}
69d429b8cfc77f635239005d035a67d3
  options8 :: Main.Options -> Main.Options
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,A,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ opts :: Main.Options ->
                 case opts of wild { Main.Options ds ds1 ds2 ->
                 Main.Options ds GHC.Types.True ds2 }) -}
f0648c0bb2720cad26d434d6d75c99c6
  options9 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.options10
                   (GHC.Types.[] @ GHC.Base.String)) -}
d9c1a53a703db0a774b11f8f6f03203f
  usage :: GHC.Base.String
  {- Unfolding: (System.Console.GetOpt.usageInfo
                   @ (Main.Options -> Main.Options)
                   Main.usage1
                   Main.options) -}
6329625a8119bcaa0d08bb7fb1df2239
  usage1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Usage: gs-lzss [-d | -b | -e] file_name [offset]"#) -}
instance GHC.Classes.Eq [Main.Action] = Main.$fEqAction
instance GHC.Show.Show [Main.Action] = Main.$fShowAction
instance GHC.Show.Show [Main.Options] = Main.$fShowOptions
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

